{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../DiceRollListener.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import RPG from 'rpg-dice-roller';\n  import { client } from '../lib/speechly';\n\n  let textContent = '';\n  let transcript = '';\n\n  const updateTranscript = (text) => {\n    transcript.innerHTML = text;\n  };\n\n  const appendMessage = (message) => {\n    textContent.innerHTML = textContent.innerHTML += `${message}\\n`;\n    textContent.scrollTop = textContent.scrollHeight;\n  };\n  const clear = () => (textContent.innerHTML = '');\n\n  export let recording = boolean;\n\n  $: {\n    if (recording) {\n      client.startContext((err) => {\n        if (err !== undefined) {\n          console.error(err);\n          updateTranscript('Error: Failed to start recording!');\n        } else {\n          updateTranscript('Listening...');\n        }\n      });\n    } else {\n      client.stopContext();\n    }\n  }\n\n  // React to the phrases received from the API\n  client.onSegmentChange((segment) => {\n    const phrase = segment.words\n      .map(({ value, isFinal }) => {\n        const klass = isFinal ? 'final' : 'tentative';\n        return `<span class=\"transcript-${klass}\">${value.toLowerCase()}</span>`;\n      })\n      .join(' ');\n    updateTranscript(phrase);\n\n    if (segment.isFinal) {\n      // roll dice\n      const rolls = [];\n      const roller = new RPG.DiceRoller();\n      let quantity = 1;\n      for (const { type, value } of segment.entities) {\n        switch (type) {\n          case 'quantity':\n            quantity = isNaN(value) ? 1 : value;\n            break;\n          case 'dice':\n            if (!isNaN(value)) {\n              const roll = `${Number(quantity)}d${Number(value)}`;\n              rolls.push(roll);\n              roller.roll(roll);\n              quantity = 1; // reset\n            }\n            break;\n        }\n      }\n      if (roller.total) {\n        appendMessage(`Rolling: ${rolls.join(' + ')}`);\n        appendMessage(\n          roller\n            .toString()\n            .split(';')\n            .map((r) => r.trim())\n            .join('\\n'),\n        );\n        appendMessage(`Total: ${roller.total}\\n`);\n      } else {\n        appendMessage(\"Sorry, didn't hear any rolls this time.\\n\");\n      }\n    }\n  });\n</script>\n\n<style>\n  pre.pre-main {\n    resize: vertical;\n    height: 35vh;\n    max-height: 135vh;\n    border-radius: 0.25em;\n    color: #333;\n  }\n</style>\n\n<div>\n  <pre class=\"bg-white small border p-3\" bind:this={transcript} />\n  <pre\n    class=\"pre-scrollable pre-main bg-white small border p-3\"\n    bind:this={textContent} />\n  <button class=\"btn btn-lg btn-primary btn-block\" on:click={clear}>\n    Clear\n  </button>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAkFE,GAAG,SAAS,cAAC,CAAC,AACZ,MAAM,CAAE,QAAQ,CAChB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,MAAM,CACrB,KAAK,CAAE,IAAI,AACb,CAAC"
}